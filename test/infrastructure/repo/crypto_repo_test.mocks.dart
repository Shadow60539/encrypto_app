// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_encrypto/test/infrastructure/repo/crypto_repo_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i2;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_encrypto/infrastructure/data/crypto_data_source.dart'
    as _i4;
import 'package:flutter_encrypto/infrastructure/model/file_count_model.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFile_0 extends _i1.Fake implements _i2.File {}

class _FakeUnit_1 extends _i1.Fake implements _i3.Unit {}

/// A class which mocks [ICryptoDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockICryptoDataSource extends _i1.Mock implements _i4.ICryptoDataSource {
  MockICryptoDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.File> encrypt({String? path, String? key}) =>
      (super.noSuchMethod(
              Invocation.method(#encrypt, [], {#path: path, #key: key}),
              returnValue: Future<_i2.File>.value(_FakeFile_0()))
          as _i5.Future<_i2.File>);
  @override
  _i5.Future<_i2.File> decrypt({String? path, String? key}) =>
      (super.noSuchMethod(
              Invocation.method(#decrypt, [], {#path: path, #key: key}),
              returnValue: Future<_i2.File>.value(_FakeFile_0()))
          as _i5.Future<_i2.File>);
  @override
  _i5.Future<_i3.Unit> incrementFileCount(int? fileSize) =>
      (super.noSuchMethod(Invocation.method(#incrementFileCount, [fileSize]),
              returnValue: Future<_i3.Unit>.value(_FakeUnit_1()))
          as _i5.Future<_i3.Unit>);
  @override
  _i5.Stream<_i6.FileCountModel> fileCountStream() =>
      (super.noSuchMethod(Invocation.method(#fileCountStream, []),
              returnValue: Stream<_i6.FileCountModel>.empty())
          as _i5.Stream<_i6.FileCountModel>);
}
