// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_encrypto/test/domain/usecase/encrypt_file_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_encrypto/domain/entity/file_count.dart' as _i7;
import 'package:flutter_encrypto/domain/failure/crypto_failure.dart' as _i5;
import 'package:flutter_encrypto/domain/repository/i_crypto_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeUnit_1 extends _i1.Fake implements _i2.Unit {}

/// A class which mocks [ICryptoRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockICryptoRepo extends _i1.Mock implements _i3.ICryptoRepo {
  MockICryptoRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CryptoFailure, _i6.File>> encrypt(
          {String? path, String? key}) =>
      (super.noSuchMethod(
          Invocation.method(#encrypt, [], {#path: path, #key: key}),
          returnValue: Future<_i2.Either<_i5.CryptoFailure, _i6.File>>.value(
              _FakeEither_0<_i5.CryptoFailure, _i6.File>())) as _i4
          .Future<_i2.Either<_i5.CryptoFailure, _i6.File>>);
  @override
  _i4.Future<_i2.Either<_i5.CryptoFailure, _i6.File>> decrypt(
          {String? path, String? key}) =>
      (super.noSuchMethod(
          Invocation.method(#decrypt, [], {#path: path, #key: key}),
          returnValue: Future<_i2.Either<_i5.CryptoFailure, _i6.File>>.value(
              _FakeEither_0<_i5.CryptoFailure, _i6.File>())) as _i4
          .Future<_i2.Either<_i5.CryptoFailure, _i6.File>>);
  @override
  _i4.Stream<_i7.FileCount> fileCountStream() => (super.noSuchMethod(
      Invocation.method(#fileCountStream, []),
      returnValue: Stream<_i7.FileCount>.empty()) as _i4.Stream<_i7.FileCount>);
  @override
  _i4.Future<_i2.Unit> incrementFileCount(int? fileSize) =>
      (super.noSuchMethod(Invocation.method(#incrementFileCount, [fileSize]),
              returnValue: Future<_i2.Unit>.value(_FakeUnit_1()))
          as _i4.Future<_i2.Unit>);
}
